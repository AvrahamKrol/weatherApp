{"version":3,"sources":["api/config.js","api/api.js","hooks/useForecast.js","hooks/useDay.js","lib/mobx/weatherStore.js","lib/Provider.js","hooks/useStore.js","hooks/useFormateMonth.js","components/Head.js","components/CurrentWeather.js","components/ForecastItem.js","components/Forecast.js","components/forms/Input.js","components/forms/config.js","components/forms/Filter.js","app.js","lib/react-query/query-client.js","index.js"],"names":["WEATHER_API_URL","console","log","api","Object","freeze","async","data","axios","get","useForecast","isFetched","useQuery","getWeather","forecastList","useDay","days","id","find","day","store","constructor","type","minTemperature","maxTemperature","isFiltered","selectedDayId","this","filteredDays","computedFn","filter","isCorrectType","isCorrectMinTemperature","String","temperature","isCorrectMaxTemperature","makeAutoObservable","autoBind","setType","setMinTemperature","temp","setMaxTemperature","applyFilter","isFormBlocked","setSelectedDayId","isSelectedDayId","resetFilter","Context","createContext","Provider","props","value","children","useStore","useContext","useFormateMonth","month","formatedMonth","slice","Head","observer","formatedDay","isFilteredDay","isNothing","dayOfWeek","dayOfMonth","className","format","locale","ru","CurrentWeather","rain_probability","humidity","ForecastItem","onClick","selectedDay","defaultDay","defaultFilteredDay","isSelected","Forecast","actualForecastList","filteredList","map","item","isSelectedDay","Input","input","disabled","name","register","defaultProps","tag","yup","shape","Filter","isCloudy","setIsCloudy","useState","isSunny","setIsSunny","isType","setIsType","form","useForm","mode","handleSubmit","useEffect","watch","onSubmit","htmlFor","reset","App","length","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","configure","enforceActions","computedRequiresReaction","observableRequiresReaction","render","client","document","getElementById"],"mappings":"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","file":"static/js/main.2207dd6f.chunk.js","sourcesContent":["const ROOT_URL = process.env.REACT_APP_WEATHER_API_URL;\nexport const WEATHER_API_URL = `${ROOT_URL}/rtx/api/forecast`;\n","// Core\nimport axios from 'axios';\n\nimport { WEATHER_API_URL } from './config';\n// eslint-disable-next-line\nconsole.log(WEATHER_API_URL);\n\nexport const api = Object.freeze({\n    async getWeather() {\n        const { data } =  await axios.get(`${WEATHER_API_URL}`);\n\n        return data?.data;\n    },\n});\n","// Core\nimport { useQuery } from 'react-query';\n\n// Api\nimport { api } from '../api';\n\nexport const useForecast = () => {\n    const { data, isFetched } = useQuery('weather', api.getWeather);\n\n    const forecastList = {\n        forecastList: data,\n        isFetched,\n    };\n\n    return forecastList;\n};\n","export const useDay = (days, id) => {\n    if (days) {\n        const findDay = days?.find((day) => day.id === id) || days[ 0 ];\n\n        return findDay;\n    }\n};\n","// Core\nimport { makeAutoObservable } from 'mobx';\nimport { computedFn } from 'mobx-utils';\n\nexport class WeatherStore {\n    type = '';\n    minTemperature = '';\n    maxTemperature = '';\n    isFiltered = false;\n    selectedDayId = '';\n\n    constructor() {\n        this\n            .filteredDays = computedFn((days) => {\n                const filteredDays = days?.filter((day) => {\n                    const isCorrectType = this.type\n                        ? this.type === day.type\n                        : true;\n                    const isCorrectMinTemperature = this.minTemperature\n                        ? this.minTemperature <= String(day.temperature)\n                        : true;\n                    const isCorrectMaxTemperature = this.maxTemperature\n                        ? this.maxTemperature >= String(day.temperature)\n                        : true;\n\n                    return (\n                        isCorrectType\n                    && isCorrectMinTemperature\n                    && isCorrectMaxTemperature\n                    );\n                });\n\n                return filteredDays;\n            });\n\n        makeAutoObservable(this, {}, {\n            autoBind: true,\n        });\n    }\n\n    setType(type) {\n        this.type = type;\n    }\n\n    setMinTemperature(temp) {\n        this.minTemperature = temp;\n    }\n\n    setMaxTemperature(temp) {\n        this.maxTemperature = temp;\n    }\n\n    applyFilter(filter) {\n        if (filter.type) {\n            this.type = filter.type;\n        }\n\n        if (filter.minTemperature) {\n            this.minTemperature = filter.minTemperature;\n        }\n\n        if (filter.maxTemperature) {\n            this.maxTemperature = filter.maxTemperature;\n        }\n\n        this.isFiltered = true;\n    }\n\n    get isFormBlocked() {\n        return this.type === '' && this.minTemperature === '' && this.maxTemperature === '';\n    }\n\n    setSelectedDayId(id) {\n        this.selectedDayId = id;\n    }\n\n    get isSelectedDayId() {\n        return this.selectedDayId;\n    }\n\n    resetFilter() {\n        this.maxTemperature = '';\n        this.minTemperature = '';\n        this.type = '';\n        this.isFiltered = false;\n    }\n}\n\nexport const store = new WeatherStore();\n","// Core\nimport { createContext } from 'react';\n\n// Store\nimport { store } from './mobx';\n\nexport const Context = createContext(store);\n\nexport const Provider = (props) => {\n    return (\n        <Context.Provider value = { store }>\n            { props.children }\n        </Context.Provider>\n    );\n};\n","import { useContext } from 'react';\nimport { Context } from '../lib/Provider';\n\nexport const useStore = () => {\n    const store = useContext(Context);\n\n    return store;\n};\n","export const useFormateMonth = (month) => {\n    let formatedMonth = null;\n    if (month === 'март'\n        || month === 'август') {\n        formatedMonth = `${month}а`;\n    } else formatedMonth = `${month?.slice(0, -1)}я`;\n\n    return formatedMonth;\n};\n","import { format } from 'date-fns';\nimport { ru } from 'date-fns/locale';\n// Mobx\nimport { observer } from 'mobx-react-lite';\n// Hooks\nimport { useFormateMonth, useStore } from '../hooks';\n\nexport const Head = observer(({ formatedDay, isFilteredDay, isNothing }) => {\n    const store = useStore();\n    let dayOfWeek = null;\n    let dayOfMonth = null;\n    let month = null;\n    let className = null;\n\n    if (!store.isFiltered) {\n        dayOfWeek = formatedDay && format(formatedDay?.day, 'eeee', { locale: ru });\n        dayOfMonth = formatedDay && format(formatedDay?.day, 'd', { locale: ru });\n        month = formatedDay && format(formatedDay?.day, 'LLLL', { locale: ru });\n        className = `icon ${formatedDay?.type}`;\n    }\n    if (store.isFiltered) {\n        dayOfWeek = isFilteredDay && format(isFilteredDay?.day, 'eeee', { locale: ru });\n        dayOfMonth = isFilteredDay && format(isFilteredDay?.day, 'd', { locale: ru });\n        month = isFilteredDay && format(isFilteredDay?.day, 'LLLL', { locale: ru });\n        className = `icon ${isFilteredDay?.type}`;\n    }\n    if (!isNothing) {\n        return (\n            <div className = 'head'>\n                <div className = { className }></div>\n                <div className = 'current-date'>\n                    <p>{ dayOfWeek }</p>\n                    <span>{ dayOfMonth } { useFormateMonth(month) }</span>\n                </div>\n            </div>\n        );\n    }\n\n    return '';\n});\n","import { observer } from 'mobx-react-lite';\nimport { useStore } from '../hooks';\n\nexport const CurrentWeather = observer(({ formatedDay, isFilteredDay }) => {\n    const store = useStore();\n\n    const day = store.isFiltered ? isFilteredDay : formatedDay;\n\n    if (day) {\n        return (\n            <div className = 'current-weather'>\n                <p className = 'temperature'>{ day?.temperature }</p>\n                <p className = 'meta'>\n                    <span className = 'rainy'>%{ day?.rain_probability }</span>\n                    <span className = 'humidity'>%{ day?.humidity }</span>\n                </p>\n            </div>\n        );\n    }\n\n    return '';\n});\n","import { format } from 'date-fns';\nimport { ru } from 'date-fns/locale';\nimport { observer } from 'mobx-react-lite';\nimport { log } from '../helpers';\n\nexport const ForecastItem = observer((props) => {\n    const {\n        day, id, type, temperature, onClick, selectedDay, defaultDay,\n        defaultFilteredDay,\n    } = props;\n\n    const handleGetSelectedDayId = () => {\n        onClick(id);\n    };\n    const isSelected = selectedDay || defaultFilteredDay ||  defaultDay;\n\n    return (\n        <div\n            onClick = { handleGetSelectedDayId }\n            className = { `day ${type} ${isSelected === id ? 'selected' : ''}` }>\n            <p>{ format(day, 'EEEE', { locale: ru }) }</p>\n            <span>{ temperature }</span>\n        </div>\n    );\n});\n","// Core\nimport { observer } from 'mobx-react-lite';\n// Helpers\nimport { log } from '../helpers';\n\n\n// Components\nimport { ForecastItem } from './ForecastItem';\n\n// Helpers\nimport { fetchify } from '../helpers/fetchify';\n// Hooks\nimport { useForecast, useStore } from '../hooks';\n\n\nexport const Forecast = observer((props) => {\n    const { forecastList } = useForecast();\n    const store = useStore();\n\n    const actualForecastList = store.isFiltered ? props.filteredList : forecastList;\n\n    const setSelectedDayId = (id) => {\n        store.setSelectedDayId(id);\n    };\n\n    return (\n        <div className = 'forecast'>\n            { props.isNothing\n            && <p className = 'message'>По заданным критериям нет доступных дней</p> }\n            { actualForecastList?.slice(0, 7).map((item) => {\n                return <ForecastItem\n                    key = { item.id }\n                    onClick = { setSelectedDayId }\n                    defaultDay = { actualForecastList[ 0 ]?.id }\n                    selectedDay = { store.isFiltered\n                        ? props.isFilteredDay?.id : props.isSelectedDay?.id }\n                    { ...item } />;\n            }) }\n        </div>\n    );\n});\n","import { useStore } from '../../hooks';\n\nexport const Input = (props) => {\n    const input = (\n        <input\n            className = { props.className }\n            disabled = { props.disabled }\n            type = { props.type }\n            id = { props.id }\n            value = { props.value }\n            name = { props.name }\n            { ...props.register } />);\n\n    return (\n        <>\n            { input }\n        </>\n    );\n};\n\nInput.defaultProps = {\n    type: 'text',\n    tag:  'input',\n};\n\n","import * as yup from 'yup';\n\n// eslint-disable-next-line no-template-curly-in-string\nconst tooLongMessage = 'максимальная длина - ${max} символов';\n\nexport const schema = yup.object().shape({\n    minTemperature: yup\n        .number(),\n    // .required('*'),\n    maxTemperature: yup\n        .number(),\n    // .required('*'),\n});\n","// Core\nimport { useEffect, useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// Components\nimport { Input } from './Input';\nimport { schema } from './config';\n// Hooks\nimport { useStore } from '../../hooks';\n\n\nexport const Filter = observer(() => {\n    const [isCloudy, setIsCloudy] = useState('');\n    const [isSunny, setIsSunny] = useState('');\n    const [isType, setIsType] = useState('');\n\n    const store = useStore();\n\n    const {\n        applyFilter, resetFilter, isFiltered,\n        isFormBlocked,\n    } = store;\n\n    const form = useForm({\n        mode: 'onTouched',\n    });\n\n    const { register, handleSubmit } = form;\n\n    const onSubmit = (data) => {\n        const filter = {\n            type:           isType,\n            minTemperature: data.minTemperature,\n            maxTemperature: data.maxTemperature,\n        };\n        applyFilter(filter);\n    };\n\n    const handleReset = () => {\n        resetFilter();\n        setIsCloudy('');\n        setIsSunny('');\n        setIsType('');\n        form.reset();\n    };\n\n    const handleIsCloudy = () => {\n        if (isFiltered) {\n            return;\n        }\n        if (!isCloudy) {\n            setIsCloudy('selected');\n            setIsSunny('');\n            setIsType('cloudy');\n        }\n    };\n    const handleIsSunny = () => {\n        if (isFiltered) {\n            return;\n        }\n        if (!isSunny) {\n            setIsSunny('selected');\n            setIsCloudy('');\n            setIsType('sunny');\n        }\n    };\n\n    useEffect(() => {\n        form.watch((data) => {\n            console.log(data);\n        });\n    }, [form.watch()]);\n\n    return (\n        <form onSubmit = { handleSubmit(onSubmit) } className = 'filter'>\n            <span\n                onClick = { handleIsCloudy }\n                className = { `checkbox ${isCloudy}` }>Облачно</span>\n            <span\n                onClick = { handleIsSunny }\n                className = { `checkbox ${isSunny}` }>Солнечно</span>\n            <p className = 'custom-input'>\n                <label htmlFor = 'min-temperature'>Минимальная температура</label>\n                <Input\n                    type = 'number'\n                    disabled = { store.isFiltered }\n                    id = 'min-temperature'\n                    register = { register('minTemperature') } />\n            </p>\n            <p className = 'custom-input'>\n                <label htmlFor = 'max-temperature'>Максимальная температура</label>\n                <Input\n                    type = 'number'\n                    disabled = { store.isFiltered }\n                    id = 'max-temperature'\n                    register = { register('maxTemperature') } />\n            </p>\n            { !store.isFiltered && <button>Отфильтровать</button> }\n            { store.isFiltered && <button onClick = { handleReset }>Сбросить</button> }\n        </form>\n    );\n});\n","// Core\nimport { useState } from 'react';\nimport { observer } from 'mobx-react-lite';\n// Components\nimport {\n    Filter, Head, CurrentWeather, Forecast,\n} from './components';\n// Instruments\nimport { log } from './helpers';\n// Hooks\nimport { useDay, useForecast, useStore } from './hooks';\n\n\nexport const App = observer(() => {\n    const store = useStore();\n    const { forecastList } = useForecast();\n    const day = forecastList && useDay(forecastList, store.isSelectedDayId);\n\n    const filteredList = store.filteredDays(forecastList);\n    const isFilteredDay = useDay(filteredList, store.isSelectedDayId);\n    const isNothing = store.isFiltered && filteredList.length === 0;\n\n    return (\n        <main>\n            <Filter />\n            <Head\n                isNothing = { isNothing }\n                formatedDay = { day }\n                isFilteredDay = { isFilteredDay } />\n            <CurrentWeather\n                formatedDay = { day }\n                isFilteredDay = { isFilteredDay } />\n            <Forecast\n                isNothing = { isNothing }\n                isSelectedDay = { day }\n                filteredList = { filteredList }\n                isFilteredDay = { isFilteredDay } />\n        </main>\n    );\n});\n","// Core\nimport { QueryClient } from 'react-query';\n\nexport const queryClient = new QueryClient({\n    defaultOptions: {\n        queries: {\n            refetchOnWindowFocus: false,\n        },\n    },\n});\n","// Core\nimport { render } from 'react-dom';\nimport { QueryClientProvider } from 'react-query';\nimport { configure } from 'mobx';\n\n// Components\nimport { App } from './app';\nimport { Provider } from './lib/Provider';\n\n// Instruments\nimport './theme/index.scss';\nimport { queryClient } from './lib/react-query';\n\nconfigure({\n    enforceActions:             'always',\n    computedRequiresReaction:   true,\n    observableRequiresReaction: true,\n    // reactionRequiresObservable: true,\n});\n\nrender(\n    <Provider>\n        <QueryClientProvider client = { queryClient }>\n            <App />\n        </QueryClientProvider>\n    </Provider>,\n    document.getElementById('root'),\n    () => {\n        // eslint-disable-next-line no-console\n        console.log('%c Приложение успешно запущено ', 'background: #00ff00; color: #000000; padding: 2.5px;');\n    },\n);\n"],"sourceRoot":""}